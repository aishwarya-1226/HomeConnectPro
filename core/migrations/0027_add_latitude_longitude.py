# Generated by Django 3.2.5 on 2024-12-22 19:03

from django.db import migrations,models
from geopy.geocoders import GoogleV3
from geopy.exc import GeocoderTimedOut
import logging
from django.db import connection

GOOGLE_API_KEY ='AIzaSyAOcYGAH1Ye5f0nRxF6YJjdLlHycdSrVQw'

def populate_lat_long(apps, schema_editor):
    Property = apps.get_model('core', 'Property')  # Ensure you reference the correct app and model
    geolocator = GoogleV3(api_key=GOOGLE_API_KEY)

    for property in Property.objects.all():
        if not property.latitude or not property.longitude:
            full_address = property.address
            if property.state:
                full_address += f", {property.state}"
            if property.zip_code:
                full_address += f" {property.zip_code}"

            try:
                location = geolocator.geocode(full_address)
                if location:
                    property.latitude = location.latitude
                    property.longitude = location.longitude
                    property.save()
                else:
                    logging.warning(f"Geocoding failed for address: {full_address}")
            except GeocoderTimedOut:
                logging.error(f"Geocoding API timed out for address: {full_address}")
            except Exception as e:
                logging.error(f"Error geocoding address {full_address}: {e}")

def clear_lat_long(apps, schema_editor):
    Property = apps.get_model('core', 'Property')
    
    # Set latitude and longitude to None (clear values)
    for property in Property.objects.all():
        property.latitude = None
        property.longitude = None
        property.save()

def initialize_spatialite(apps, schema_editor):
    """Custom function to initialize SpatiaLite"""
    if connection.vendor == 'sqlite':
        with connection.cursor() as cursor:
            cursor.execute("SELECT load_extension('mod_spatialite');")
            cursor.execute("SELECT InitSpatialMetadata(1);")  # Initialize SpatiaLite extension

class Migration(migrations.Migration):

    dependencies = [
        ('core', '0026_remove_property_created_at_inquiry_created_at'),
    ]

    operations = [
        migrations.AddField(
                model_name='property',
                name='latitude',
                field=models.FloatField(null=True, blank=True),
        ),
        migrations.AddField(
            model_name='property',
            name='longitude',
            field=models.FloatField(null=True, blank=True),
        ),
        migrations.RunPython(populate_lat_long, reverse_code=clear_lat_long),
        migrations.RunPython(initialize_spatialite), 
    ]
